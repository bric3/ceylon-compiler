package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
@.com.redhat.ceylon.compiler.java.metadata.Members({@.com.redhat.ceylon.compiler.java.metadata.Member(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)})
class Correct implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    Correct() {
        final long expected = 55L;
        if (expected == notOptimizedIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == notOptimizedIteration()"));
        }
        if (expected == rangeOpIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIteration()"));
        }
        if (expected == rangeOpIterationReverse$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIterationReverse()"));
        }
        if (expected == rangeIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration()"));
        }
        if (expected == rangeIterationReverse$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse()"));
        }
        if (expected == rangeIteration2$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration2()"));
        }
        if (expected == rangeIterationReverse2$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse2()"));
        }
        if (expected == arrayIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationStatic()"));
        }
        if (expected == javaArrayIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == javaArrayIterationStatic()"));
        }
        if (expected == tupleIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == tupleIterationStatic()"));
        }
        if (expected == rangeIterationDynamic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationDynamic()"));
        }
        if (expected == arrayIterationDynamic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationDynamic()"));
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long notOptimizedIteration$priv$() {
        long sum = 0L;
        .java.lang.Object elem$0;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$1 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L)).iterator();
        loop_0: while (!((elem$0 = i$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$0).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeOpIteration$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$3 = 1L;
        final long $ceylontmp$end$4 = 10L;
        final boolean $ceylontmp$increasing$5 = $ceylontmp$start$3 <= $ceylontmp$end$4;
        final long $ceylontmp$incr$6 = $ceylontmp$increasing$5 ? 1L : -1L;
        loop_1: for (long i$7 = $ceylontmp$start$3; $ceylontmp$increasing$5 ? i$7 - $ceylontmp$end$4 <= 0L : i$7 - $ceylontmp$end$4 >= 0L; i$7 += $ceylontmp$incr$6) {
            final long i = i$7;
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeOpIterationReverse$priv$() {
        long sum = 0L;
        final long $ceylontmp$start$9 = 10L;
        final long $ceylontmp$end$10 = 1L;
        final boolean $ceylontmp$increasing$11 = $ceylontmp$start$9 <= $ceylontmp$end$10;
        final long $ceylontmp$incr$12 = $ceylontmp$increasing$11 ? 1L : -1L;
        loop_2: for (long i$13 = $ceylontmp$start$9; $ceylontmp$increasing$11 ? i$13 - $ceylontmp$end$10 <= 0L : i$13 - $ceylontmp$end$10 >= 0L; i$13 += $ceylontmp$incr$12) {
            final long i = i$13;
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIteration$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        .java.lang.Object elem$15;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$16 = range.iterator();
        loop_3: while (!((elem$15 = i$iterator$$16.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$15).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationReverse$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        .java.lang.Object elem$18;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$19 = range.iterator();
        loop_4: while (!((elem$18 = i$iterator$$19.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$18).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 7)
    @.com.redhat.ceylon.compiler.java.metadata.Name("MyOrdinal")
    @.com.redhat.ceylon.compiler.java.metadata.Container(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class)
    @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Enumerable<com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal>"})
    class MyOrdinal implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Enumerable<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> {
        
        MyOrdinal(@.com.redhat.ceylon.compiler.java.metadata.Name("i")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        final long i) {
            this.i = i;
            this.$ceylon$language$Enumerable$this$ = new .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), this);
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        private final long i;
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared")})
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        public final long getI() {
            return i;
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        protected final .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Enumerable$this$;
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Enumerable$impl() {
            return $ceylon$language$Enumerable$this$;
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getSuccessor() {
            return (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)$ceylon$language$Enumerable$this$.getSuccessor();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getPredecessor() {
            return (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)$ceylon$language$Enumerable$this$.getPredecessor();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public long offsetSign(final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return $ceylon$language$Enumerable$this$.offsetSign(other);
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.Annotations({
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                value = "com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal",
                erased = true,
                untrusted = true)
        public final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal neighbour(@.com.redhat.ceylon.compiler.java.metadata.Name("n")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        final long n) {
            return new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(getI() + n);
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.com.redhat.ceylon.compiler.java.metadata.Annotations({
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"),
                @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
        public final long offset(@.com.redhat.ceylon.compiler.java.metadata.Name("other")
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal")
        final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return getI() - other.getI();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class));
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIteration2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L));
        .java.lang.Object elem$21;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$22 = range.iterator();
        loop_5: while (!((elem$21 = i$iterator$$22.next()) instanceof .ceylon.language.Finished)) {
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$21;
            sum += i.getI();
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationReverse2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L));
        .java.lang.Object elem$24;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$25 = range.iterator();
        loop_6: while (!((elem$24 = i$iterator$$25.next()) instanceof .ceylon.language.Finished)) {
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$24;
            sum += i.getI();
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arrayIterationStatic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> array = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        long sum = 0L;
        final .java.lang.Object array$27 = array.toArray();
        final int length$28 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$27);
        loop_7: for (int i$29 = 0; i$29 < length$28; i$29++) {
            final long i = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$27, i$29);
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long javaArrayIterationStatic$priv$() {
        final int[] array = new int[.com.redhat.ceylon.compiler.java.Util.toInt(10L)];
        final long $ceylontmp$start$31 = 1L;
        final long $ceylontmp$end$32 = 10L;
        final boolean $ceylontmp$increasing$33 = $ceylontmp$start$31 <= $ceylontmp$end$32;
        final long $ceylontmp$incr$34 = $ceylontmp$increasing$33 ? 1L : -1L;
        loop_8: for (long index$35 = $ceylontmp$start$31; $ceylontmp$increasing$33 ? index$35 - $ceylontmp$end$32 <= 0L : index$35 - $ceylontmp$end$32 >= 0L; index$35 += $ceylontmp$incr$34) {
            final long index = index$35;
            array[.com.redhat.ceylon.compiler.java.Util.toInt(index - 1L)] = .com.redhat.ceylon.compiler.java.Util.toInt(index);
        }
        long sum = 0L;
        final int[] array$36 = array;
        loop_9: for (int i$38 = 0; i$38 < array$36.length; i$38++) {
            final long i = array$36[i$38];
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long tupleIterationStatic$priv$() {
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> array = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Integer.instance(5L),
                .ceylon.language.Integer.instance(6L),
                .ceylon.language.Integer.instance(7L),
                .ceylon.language.Integer.instance(8L),
                .ceylon.language.Integer.instance(9L),
                .ceylon.language.Integer.instance(10L)});
        long sum = 0L;
        .java.lang.Object elem$40;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$41 = array.iterator();
        loop_10: while (!((elem$40 = i$iterator$$41.next()) instanceof .ceylon.language.Finished)) {
            final long i = ((.ceylon.language.Integer)elem$40).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long iterationDynamic$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("iterable")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Iterable<ceylon.language::Integer,ceylon.language::Null>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable) {
        long sum = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$45 = iterable;
        final boolean isArray$46 = iterable$45 instanceof .ceylon.language.Array;
        final boolean isTuple$47 = iterable$45 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$45).$getArray$() != null;
        .java.lang.Object elem$43 = null;
        final .java.lang.Object array$48;
        int i$49 = 0;
        final int length$50;
        if (isTuple$47) {
            array$48 = ((.ceylon.language.Tuple)iterable$45).$getArray$();
            i$49 = ((.ceylon.language.Tuple)iterable$45).$getFirst$();
            length$50 = i$49 + ((.ceylon.language.Tuple)iterable$45).$getLength$();
        } else if (isArray$46) {
            array$48 = ((.ceylon.language.Array)iterable$45).toArray();
            length$50 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$48);
        } else {
            array$48 = null;
            length$50 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$44 = isTuple$47 || isArray$46 ? null : iterable$45.iterator();
        loop_11: while (isTuple$47 || isArray$46 ? i$49 < length$50 : !((elem$43 = i$iterator$$44.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$47 || isArray$46) elem$43 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$48, i$49++);
            final long i = ((.ceylon.language.Integer)elem$43).longValue();
            sum += i;
        }
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long rangeIterationDynamic$priv$() {
        final .ceylon.language.Range<.ceylon.language.Integer> iterable = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L));
        return iterationDynamic$priv$(iterable);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    private final long arrayIterationDynamic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> iterable = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        return iterationDynamic$priv$(iterable);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class);
}