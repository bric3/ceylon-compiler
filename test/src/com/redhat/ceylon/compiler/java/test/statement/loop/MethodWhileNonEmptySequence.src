package com.redhat.ceylon.compiler.java.test.statement.loop;

class MethodWhileNonEmptySequence implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    MethodWhileNonEmptySequence() {
    }
    
    public final long m(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        loop_0: while (true) {
            .ceylon.language.Sequential<? extends .ceylon.language.Integer> x$0;
            if ((x$0 = x) instanceof .ceylon.language.Sequence) {
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> x$1 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)x$0;
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s = x$1;
                return ((.ceylon.language.Integer)(.java.lang.Object)x$1.getFirst()).longValue();
            } else {
                break loop_0;
            }
        }
        return 0L;
    }
    
    public final long mvar(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        loop_1: while (true) {
            .ceylon.language.Sequential<? extends .ceylon.language.Integer> s$2;
            if ((s$2 = x) instanceof .ceylon.language.Sequence) {
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s$3 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)s$2;
                return ((.ceylon.language.Integer)(.java.lang.Object)s$3.getFirst()).longValue();
            } else {
                break loop_1;
            }
        }
        return 0L;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.statement.loop.MethodWhileNonEmptySequence();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.MethodWhileNonEmptySequence.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.MethodWhileNonEmptySequence.class);
}